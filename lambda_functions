var http = require('http');
exports.handler = function (event, context) {
   try {
       console.log("event.session.application.applicationId=" + event.session.application.applicationId);
       /**
        * Uncomment this if statement and populate with your skill's application ID to
        * prevent someone else from configuring a skill that sends requests to this function.
        */
      //  if (event.session.application.applicationId !== "amzn1.ask.skill.0345af6a-fe5f-47e6-a7c6-0913753befe8") {
      //       context.fail("Invalid Application ID");
      //  }

       if (event.session.new) {
           onSessionStarted({ requestId: event.request.requestId }, event.session);
       }
       if (event.request.type === "LaunchRequest") {
           onLaunch(event.request,
               event.session,
               function callback(sessionAttributes, speechletResponse) {
                   context.succeed(buildResponse(sessionAttributes, speechletResponse));
               });
       } else if (event.request.type === "IntentRequest") {
           onIntent(event.request,
               event.session,
               function callback(sessionAttributes, speechletResponse) {
                   context.succeed(buildResponse(sessionAttributes, speechletResponse));
               });
       } else if (event.request.type === "SessionEndedRequest") {
           onSessionEnded(event.request, event.session);
           context.succeed();
       }
   } catch (e) {
       context.fail("Exception: " + e);
   }
};
/**
* Called when the session starts.
*/
function onSessionStarted(sessionStartedRequest, session) {
   console.log("onSessionStarted requestId=" + sessionStartedRequest.requestId +
       ", sessionId=" + session.sessionId);
}
/**
* Called when the user launches the skill without specifying what they want.
*/
function onLaunch(launchRequest, session, callback) {
   console.log("onLaunch requestId=" + launchRequest.requestId +
       ", sessionId=" + session.sessionId);
   // Dispatch to your skill's launch.
   getWelcomeResponse(callback);
}
/**
* Called when the user specifies an intent for this skill.
*/
function onIntent(intentRequest, session, callback) {
   console.log("onIntent requestId=" + intentRequest.requestId +
       ", sessionId=" + session.sessionId);
   var intent = intentRequest.intent,
       intentName = intentRequest.intent.name;

   if("WelcomeIntent" === intentName) {
   getWelcomeResponse(callback);
   }
   if ("Languages" === intentName) {
       FindNativeSpeakers(intent, session, callback);
   } else {
       throw "Invalid intent";
   }
}

function onSessionEnded(sessionEndedRequest, session) {
   console.log("onSessionEnded requestId=" + sessionEndedRequest.requestId +
       ", sessionId=" + session.sessionId);
}

// --------------- Functions that control the skill's behavior -----------------------
function getWelcomeResponse(callback) {
   var sessionAttributes = {};
   var cardTitle = "5eAPI";
   var speechOutput = "Welcome to the 5e<say-as interpret-as=\"spell-out\">API</say-as>. " +
       "Feel free to ask for any information found in the Player's Handbook for example 'Who speaks common'";
   // If the user either does not reply to the welcome message or says something that is not
   // understood, they will be prompted again with this text.
   var repromptText = "Feel free to ask for any information found in the Player's Handbook for example 'Who speaks common'";
   var shouldEndSession = false;
   callback(sessionAttributes,
       buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession));
}
function handleSessionEndRequest(callback) {
   var cardTitle = "Session Ended";
   var speechOutput = "Thank you for using the 5e<say-as interpret-as=\"spell-out\">API</say-as>.";
   var shouldEndSession = true;
   callback({}, buildSpeechletResponse(cardTitle, speechOutput, null, shouldEndSession));
}

/*
 * Prepares the speech to reply to the user.
 */
 function FindNativeSpeakers(intent, session, callback) {
    var cardTitle = "Languages";
    var languageSlot = intent.slots.language;
    var repromptText = "";
    var shouldEndSession = false;
    var speechOutput = "";
    if (languageSlot && languageSlot.value) {
        var language = languageSlot.value;
        language = language.substr(0, 1).toUpperCase() + language.substr(1);
        sendApiRequest('languages', language, cardTitle, callback, true);
    } else {
        speechOutput = 'I was unable to find the right information. This is a work in progress please try again';
        repromptText = "Please ask me for any information found in the Player's Handbook";
        callback(sessionAttributes,
            buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession));
    }
 }

function getHelpResponse(callback) {
   // If we wanted to initialize the session to have some attributes we could add those here.
   var sessionAttributes = {};
   var cardTitle = "5eAPI";
   var speechOutput = "This is where our help test would go, it should be fixed later" +
   "For a list of resources visit http://5e-api.com/v1/";
   // If the user either does not reply to the welcome message or says something that is not
   // understood, they will be prompted again with this text.
   var repromptText = "Please try again, I didn't understand what you were asking for";
   var shouldEndSession = false;
   callback(sessionAttributes,
       buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession));
}

/*************************************************************************************
 * OUR API Request - NOT the other one!                                              *
 *************************************************************************************/
function sendApiRequest(resource, target, cardTitle, callback) {
  var sessionAttributes = {};
  var url = "";
  var baseUrl = "http://5e-api.com/v1/";

  if (resource == "languages") {
    var language = resolveLanguage(target);
    var url = baseUrl + resource + "/" + language;
  }

  console.log("Requesting: " + url);
  http.get(url, function(response) {
    response.setEncoding('utf8');
    response.on('data', function (chunk) {
      var result;

      if (chunk) {
        result = JSON.parse(chunk);
      }
      else {
        console.log('Unable to resolve the web request to 5eAPI');
      }

      var languageResult = '';

      if (result) {
        console.log('found result' + result);
        var speakerCount = result.native_speakers.length;

        if (speakerCount == 1) {
          languageResult = 'There is one race that natively speaks ' + language + "<break time=\"2ms\"/>" + result.native_speakers[0].race;
        } else if (speakerCount > 1) {
          languageResult = 'There are ' + speakerCount + ' races that natively speak ' + language + "<break time=\"500ms\"/> ";

          for (var i = 0;i < speakerCount;i++) {
            if ((i + 1) == speakerCount) {
              languageResult += ' and '
            }

            languageResult += result.native_speakers[i].race + "<break time=\"1ms\"/> ";
          }
        } else {
          languageResult = 'I cannot find any native speakers of ' + language;
        }
      }

      repromptText = "You can ask me for any information found in the Player's Handbook";

      if(languageResult)
      {
        speechOutput = languageResult;
        callback(sessionAttributes,
        buildSpeechletResponse(cardTitle, speechOutput, repromptText, true));
      }
      else
      {
        speechOutput = 'I was unable to process your request for that language';
        callback(sessionAttributes,
        buildSpeechletResponse(cardTitle, speechOutput, repromptText, false));
      }
    })
  }).on('error', function (e) {
    speechOutput = 'I was unable to find ' + language + '. Please try again';
    repromptText = 'Please ask me for any information found in the Player\'s Handbook';
    callback(sessionAttributes,
    buildSpeechletResponse(cardTitle, speechOutput, repromptText, false));
  });
}

function resolveLanguage(language) {
  var languageLowerCase = language.toLowerCase();

  var collection = [
    {key: 'aarakocra', value: 'Aarakocra'},
    {key: 'abyssal', value: 'Abyssal'},
    {key: 'aquan', value: 'Aquan'},
    {key: 'auran', value: 'Auran'},
    {key: 'celestial', value: 'Celestial'},
    {key: 'common', value: 'Common'},
    {key: 'deep speech', value: 'Deep-Speech'},
    {key: 'draconic', value: 'Draconic'},
    {key: 'druidic', value: 'Druidic'},
    {key: 'dwarvish', value: 'Dwarvish'},
    {key: 'elvish', value: 'Elvish'},
    {key: 'giant', value: 'Giant'},
    {key: 'gnomish', value: 'Gnomish'},
    {key: 'goblin', value: 'Goblin'},
    {key: 'gnoll', value: 'Gnoll'},
    {key: 'halfling', value: 'Halfling'},
    {key: 'ignan', value: 'Ignan'},
    {key: 'infernal', value: 'Infernal'},
    {key: 'orc', value: 'Orc'},
    {key: 'primordial', value: 'Primordial'},
    {key: 'sylvan', value: 'Sylvan'},
    {key: 'terran', value: 'Terran'},
    {key: 'undercommon', value: 'Undercommon'}
  ]

  for(var x = 0 ; x < collection.length; x++)
  {
      if(languageLowerCase.indexOf(collection[x].key) > -1)
      {
          console.log("Found: " + collection[x].key + " " + collection[x].value);
          return collection[x].value;
      }
  }
  return language;
}

// --------------- Helpers that build all of the responses -----------------------
function buildSpeechletResponse(title, output, repromptText, shouldEndSession) {
  return {
    outputSpeech: {
      type: "SSML",
      ssml: "<speak>" + output + "</speak>"
    },
    card: {
      type: "Simple",
      title: "5eAPI - " + title,
      content: output
    },
    reprompt: {
      outputSpeech: {
        type: "SSML",
        ssml: "<speak>" + repromptText + "</speak>"
      }
    },
    shouldEndSession: shouldEndSession
  };
}
function buildResponse(sessionAttributes, speechletResponse) {
  return {
    version: "1.0",
    sessionAttributes: sessionAttributes,
    response: speechletResponse
  };
}
